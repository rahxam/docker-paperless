# Docker Compose file for running paperless from the Docker Hub.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8010.
#
# In addition to that, this Docker Compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
#
# To install and update paperless with this file, do the following:
#
# - Open portainer Stacks list and click 'Add stack'
# - Paste the contents of this file and assign a name, e.g. 'paperless'
# - Upload 'docker-compose.env' by clicking on 'Load variables from .env file'
# - Modify the environment variables as needed
# - Click 'Deploy the stack' and wait for it to be deployed
# - Open the list of containers, select paperless_webserver_1
# - Click 'Console' and then 'Connect' to open the command line inside the container
# - Run 'python3 manage.py createsuperuser' to create a user
# - Exit the console
#
# For more extensive installation and update instructions, refer to the
# documentation.

services:
  broker:
    deploy:
      mode: replicated
      replicas: 1
    image: docker.io/library/redis:7
    networks:
      - internal
    volumes:
      - redis:/data

  db:
    image: docker.io/library/postgres:16
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
          - node.labels.database == true
    networks:
      - internal
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        delay: 20s
        monitor: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.stack.network=traefik"  

        - "traefik.http.routers.paperless.rule=Host(`paperless.hartig.es`)"
        - "traefik.http.routers.paperless.entrypoints=https"
        - "traefik.http.routers.paperless.tls=true"

        - "traefik.http.services.paperless.loadbalancer.server.port=8000"

        
        - "traefik.constraint=proxy-public"
        
        #- "traefik.http.routers.pihole.middlewares=authentik@swarm"
    networks:
      - internal
      - traefik
    depends_on:
      - db
      - broker
    # ports:
    #   - "8010:8000"
    volumes:
      - ./data:/usr/src/paperless/data
      - ./media:/usr/src/paperless/media
      - ./export:/usr/src/paperless/export
      - ./consume:/usr/src/paperless/consume
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      COMPOSE_PROJECT_NAME: paperless
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
      PAPERLESS_URL: https://paperless.hartig.es
      PAPERLESS_OCR_LANGUAGE: deu
      PAPERLESS_TIME_ZONE: Europe/Berlin
      PAPERLESS_REDIRECT_LOGIN_TO_SSO: 'true'
      PAPERLESS_APPS: "allauth.socialaccount.providers.openid_connect"
      PAPERLESS_SOCIALACCOUNT_PROVIDERS: '{"openid_connect": {"APPS": [{"provider_id": "authentik","name": "Authentik SSO","client_id": "YUasu7DvRrDtUqphVcIyqnFpwXuNVosSlccVBKYz","secret": "RjNuiD09GSNNejHk9aDGUzR5JIDhKRebsMzz15E6Hu0sr5AihOtfrt1mSjiraR2IdEUob4bBxaCKbxcIjdGRVvs9CIzBClRfTpD23GLah78KwEnnVeY24jqAQhL9ZSWB","settings": { "server_url": "https://authentik.hartig.es/application/o/paperless/.well-known/openid-configuration"}}]}}'

  gotenberg:
    image: docker.io/gotenberg/gotenberg:8.7
    networks:
      - internal
    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  tika:
    image: docker.io/apache/tika:latest
    networks:
      - internal

volumes:
  postgres:
  redis:

networks:
  traefik:
    external: true
  internal: